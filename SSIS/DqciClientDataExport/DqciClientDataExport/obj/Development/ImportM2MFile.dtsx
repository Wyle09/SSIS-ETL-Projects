<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/28/2018 1:57:20 AM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="IN01LAP18171"
  DTS:CreatorName="ES-AREA1\e9aw"
  DTS:DTSID="{0888CF5F-30D6-48C7-A174-0DAF4FC5131E}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="14.0.3008.28"
  DTS:LocaleID="16393"
  DTS:ObjectName="ImportM2MFile"
  DTS:PackageType="5"
  DTS:VersionBuild="259"
  DTS:VersionGUID="{01F26202-DD07-467D-998A-8CEF1BCE8D17}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[eLimsMilkReportExports Connection]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{C1C3BA11-CE70-419A-94BE-17C4FEC86610}"
      DTS:ObjectName="eLimsMilkReportExports Connection">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::SQlDBName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="Password">@[$Project::SQLPwd]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::SQLServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::SQlUN]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=US37SQLP001;User ID=sa;Initial Catalog=eLimsMilkReportExports;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAVtBWllYU+k+xEgTPS6m7cQAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAACCySe69v93pO41f1Qle9xrAAAAAASAAACgAAAAEAAAAFaEEoiYRkxkfxTPFv5L8fUgAAAAsCoeoEfCnzvcdsxKMqMhlV2Nv3ngke44qRUsfhAsI/oUAAAADOH9khZgA1CGppxSh7uY2mX3mN8</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0D1E6BA1-41FB-4662-A063-7F94875B5376}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="errorFileName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{29BED6B4-51C6-4263-B344-78AF517899A3}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ErrorPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="errorFilePathDestination">
      <DTS:VariableValue
        DTS:DataType="8">\\US37SQLP001\SharedFilesPathM2MReports_UAT\Error_UAT\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6359BC48-01BF-4ABE-869C-8A8E8CF53BFD}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::FilePath]  + @[User::errorFileName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="errorFilePathSource">
      <DTS:VariableValue
        DTS:DataType="8">\\US37SQLP001\SharedFilesPathM2MReports_UAT\</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Impoty M2M Container"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{D8707BF1-B7D0-4EB7-B797-8DEB1C26A2AF}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Impoty M2M Container">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Impoty M2M Container\Create Archive Folder if not exist"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="File System Task"
          DTS:DTSID="{D5D83C2B-0D51-461C-B9EB-66F5F7592C8C}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Create Archive Folder if not exist"
          DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <FileSystemData
              TaskOperationType="CreateDirectory"
              TaskOverwriteDestFile="True"
              TaskSourcePath="$Project::ArchivePath"
              TaskIsSourceVariable="True" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Impoty M2M Container\Create Error folder if not exist"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="File System Task"
          DTS:DTSID="{6D081830-D205-4481-B8CA-C13CD67D688E}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Create Error folder if not exist"
          DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <FileSystemData
              TaskOperationType="CreateDirectory"
              TaskOverwriteDestFile="True"
              TaskSourcePath="$Project::ErrorPath"
              TaskIsSourceVariable="True" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Impoty M2M Container\Create Pending folder path"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="File System Task"
          DTS:DTSID="{BA386D07-1506-4D58-B198-8E3D0E7A6C05}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Create Pending folder path"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <FileSystemData
              TaskOperationType="CreateDirectory"
              TaskOverwriteDestFile="True"
              TaskSourcePath="$Project::PendingChangesPath"
              TaskIsSourceVariable="True" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Impoty M2M Container\Create ready to send folder if not exist"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="File System Task"
          DTS:DTSID="{854B7593-5588-4B05-88EE-C887C17099CB}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Create ready to send folder if not exist"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <FileSystemData
              TaskOperationType="CreateDirectory"
              TaskOverwriteDestFile="True"
              TaskSourcePath="$Project::ReadyToSendPath"
              TaskIsSourceVariable="True" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Impoty M2M Container\Import from csv to pre staging"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{3DAE1EDB-F774-4D06-8D66-50A39DF27912}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Import from csv to pre staging"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_5cb00bdb23be427d82a21445c8102a18"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="$Project::FilePath,$Project::ArchivePath,$Project::ErrorPath,$Project::SQLServerName,$Project::SQlDBName,$Project::SQlUN,$Project::SQLPwd,$Project::LinesToSkip,$Project::Culture"
              ReadWriteVariables="User::errorFileName">
              <ProjectItem
                Name="ST_5cb00bdb23be427d82a21445c8102a18.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{09AC796F-C10E-4CFC-B191-1129B57DCA5A}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_1a3fde6a3e024fc5baee8b2e4fc1db2c</RootNamespace>
    <AssemblyName>ST_5cb00bdb23be427d82a21445c8102a18</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_1a3fde6a3e024fc5baee8b2e4fc1db2c")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Eurofins")]
[assembly: AssemblyProduct("ST_1a3fde6a3e024fc5baee8b2e4fc1db2c")]
[assembly: AssemblyCopyright("Copyright @ Eurofins 2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Text.RegularExpressions;
#endregion

namespace ST_1a3fde6a3e024fc5baee8b2e4fc1db2c
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script

        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script

        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */

        #endregion

        #region Help:  Using Integration Services connection managers in a script

        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */

        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            Dts.TaskResult = (int) ScriptResults.Success;
            string file = string.Empty;
            try
            {
                string sourceFolder = Dts.Variables["$Project::FilePath"].Value.ToString();
                string errorFolder = Dts.Variables["$Project::ErrorPath"].Value.ToString();
                string archiveFolder = Dts.Variables["$Project::ArchivePath"].Value.ToString();

                int numberOfLinesToSkip = (int)Dts.Variables["$Project::LinesToSkip"].Value;
                string culture = Dts.Variables["$Project::Culture"].Value.ToString();
                

                var seperator = CultureInfo.GetCultureInfo(culture).TextInfo.ListSeparator.ToCharArray(); // seperate by comas ',':

                //DB columns
                List<string> preStagingColumns = GetPreStagingColumns();

                foreach (string sourcFile in Directory.EnumerateFiles(sourceFolder, "*.csv"))
                {
                    file = sourcFile;
                    string[] originalRows = File.ReadAllLines(sourcFile);
                    string fileName = Path.GetFileName(sourcFile);
                    string[] dataRows = originalRows.Skip(numberOfLinesToSkip).ToArray();
                    Dts.Variables["User::errorFileName"].Value = fileName;
                    bool isValid = IsValidFileContent(dataRows);
                    if (!isValid)
                        MoveFile(fileName, sourcFile, errorFolder);
                    else
                    {

                        DataTable dt = new DataTable();

                        // read headers
                        //string[] headers = dataRows[0].Split(seperator);
                        Regex customSplit = new Regex(",(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))");
                        string[] headers = customSplit.Split(dataRows[0]);
                        CleanUpExtraQuotes(headers);

                        headers.ToList().ForEach(header => dt.Columns.Add(header.Replace(" ", "")));

                        foreach (var row in dataRows.Skip(1))
                        {
                            string[] rowItems = customSplit.Split(row);
                            CleanUpExtraQuotes(rowItems);
                            DataRow dr = dt.NewRow();
                            dr.ItemArray = rowItems;
                            dt.Rows.Add(dr);
                        }

                        System.Data.DataColumn newColumn = new System.Data.DataColumn("RowStatus", typeof(int));
                        //System.Data.DataColumn newColumn = new System.Data.DataColumn("SampleDateTime", typeof(DateTime));
                        newColumn.DefaultValue = 0; //measuredDate;
                        dt.Columns.Add(newColumn);
                        dt.Rows.Add(0);
                       
                        bool status = InsertIntoPreStaging(dt, preStagingColumns);
                        MoveFile(fileName, sourcFile, status ? archiveFolder : errorFolder);
                    }
                }
            }
            catch (Exception e)
            {
                //raise the error back to ssis so that on failure it will show the failure message instead of general target invocation exception.
                //MessageBox.Show(e.ToString());
                Dts.Events.FireError(-1, "", "File Name: " + file + " " + e.Message + " " + e.StackTrace, null, 0);
                Dts.TaskResult = (int) ScriptResults.Failure;
            }
        }

        private void CleanUpExtraQuotes(string[] items)
        {
            for (int i = 0; i < items.Length; i++)
            {
                items[i] = items[i].Trim('"');
            }
        }

        private bool IsValidFileContent(string[] rows)
        {
            if (rows.Any())
            {
                //atleast header and one data row shuld be there.
                if (rows.Count() <= 1)
                    return false;
                //if there is only one column or if the data is not seperated by delimitter.
                if (rows[0].Split(',').Count() <= 1)
                    return false;
                return true;
            }
            return false;
        }

        private static void MoveFile(string fileName, string sourcFile, string destinationFolder)
        {
            if (fileName != null)
            {
                string fileWithAbsolutePath = Path.Combine(destinationFolder, fileName);

                // Ensure that the target does not exist.
                if (File.Exists(fileWithAbsolutePath))
                    File.Delete(fileWithAbsolutePath);
                File.Move(sourcFile, fileWithAbsolutePath);
            }
        }

        private List<string> GetPreStagingColumns()
        {
            DataTable dataTable = new DataTable();
            using (SqlConnection sqlConnection = new SqlConnection(GetConnectionString()))
            {
                sqlConnection.Open();
                using (SqlCommand command = new SqlCommand())
                {
                    command.Connection = sqlConnection;
                    command.CommandType = CommandType.Text;
                    command.CommandText = "SELECT * FROM M2MFileData WHERE 1 = 0";
                    command.CommandTimeout = 60;

                    using (SqlDataReader reader = command.ExecuteReader())
                        dataTable.Load(reader);
                }
            }
            return dataTable.Columns.Cast<DataColumn>().Select(dc => dc.ColumnName).ToList();
        }

        private bool InsertIntoPreStaging(DataTable dtTable, IEnumerable<string> columnNames)
        {
            bool flag = true;
            string dtColumnName = string.Empty;

            using (SqlConnection sqlConnection = new SqlConnection(GetConnectionString()))
            {
                sqlConnection.Open();
                using (SqlBulkCopy bulkInsert = new SqlBulkCopy(sqlConnection))
                {
                    bulkInsert.DestinationTableName = "M2MFileData";

                    // Column mapping with staging table
                    foreach (string columnName in columnNames)
                    {
                        if (columnName == "RouteNumber")  
                        {
                            dtColumnName = "ProducerRouteNumber";
                            if (dtTable.Columns.IndexOf(dtColumnName) != -1)
                                bulkInsert.ColumnMappings.Add(dtColumnName, columnName);
                        }
                        else if (columnName == "CustomerFramework")  
                        {
                            dtColumnName = "CustomerFrameworkName";
                            if (dtTable.Columns.IndexOf(dtColumnName) != -1)
                                bulkInsert.ColumnMappings.Add(dtColumnName, columnName);
                        }
                        else
                        {
                            if (dtTable.Columns.IndexOf(columnName) != -1)
                                bulkInsert.ColumnMappings.Add(columnName, columnName);
                        }
                        
                    }

                    if (bulkInsert.ColumnMappings.Count == 0)
                        flag = false;
                    else
                    {
                        bulkInsert.BulkCopyTimeout = 90;
                        bulkInsert.WriteToServer(dtTable);
                    }
                }
            }
            return flag;
        }

        private string GetConnectionString()
        {
            var sqlBuilder = new SqlConnectionStringBuilder
            {
                DataSource = Dts.Variables["$Project::SQLServerName"].Value.ToString(),
                InitialCatalog = Dts.Variables["$Project::SQlDBName"].Value.ToString(),
                UserID = Dts.Variables["$Project::SQlUN"].Value.ToString(),
                Password = Dts.Variables["$Project::SQLPwd"].Value.ToString(),
                MultipleActiveResultSets = true
            };

            return sqlBuilder.ConnectionString;
        }

        #region ScriptResults declaration

        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        private enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };

        #endregion
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_5cb00bdb23be427d82a21445c8102a18</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_5cb00bdb23be427d82a21445c8102a18</msb:DisplayName>
		<msb:ProjectId>{B52A3979-6C26-493B-A1C2-993C71B6C4E6}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_5cb00bdb23be427d82a21445c8102a18.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1a3fde6a3e024fc5baee8b2e4fc1db2c.Properties.Settings.get_Default():ST_1a3fde6a3e024fc5baee8b2e4fc1db2c.Properties.Sett" +
    "ings")]

namespace ST_1a3fde6a3e024fc5baee8b2e4fc1db2c.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1a3fde6a3e024fc5baee8b2e4fc1db2c.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1a3fde6a3e024fc5baee8b2e4fc1db2c.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1a3fde6a3e024fc5baee8b2e4fc1db2c.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_1a3fde6a3e024fc5baee8b2e4fc1db2c.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_1a3fde6a3e024fc5baee8b2e4fc1db2c.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_5cb00bdb23be427d82a21445c8102a18.dll">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
5wOlBgYAmQSlBgYAQwSlBgYAXASlBgYAswOlBgYAzgMdBQoAdwTBBQoA0ALBBQYAbAAtAQYAXgAt
AQ4AGgu6CRIAcAbtABIACwvtAAYAKwdDBhIAtQHtABIAHQeAChIAWwGAChIAhgeACgYARwAtARIA
UwuACgYATwZDBgYANwN8CAYATgpDBgYAeQBDBgYAUgNpCAYA9AecCAYASweQBg4AGwP8BQ4AgwP8
BQ4A+wJ7BgoA6gXBBQYAewVDBhYAMglcAhYAxwFcAgYAcwBDBgYAWweQBgYAXwu8AAYAGgK8AAYA
nQW8ABoA0QFpBwYAVQBDBhIA7wbtAAYAQgjZCQYA3AFDBgYAjwJDBgYA6AFDBhIA2gbtAAoABAjB
BQYAdQdDBhIAEAc1BxIAUQE1BxIAiALtABIAegftAAYA0AHZCRIAtwaAChIANwWACgYA7ALZCRIA
wweAChIAqQc1BwYARgulBgAAAACoAAAAAAABAAEAAQAQAGUGAgE5AAEAAQAAABAAowj/CHUAAQAJ
AAABEACKCf8IkQADAA0AAwEAABkKAABtAAQAEAADARAAAQAAAHUABwAQAAMhEAAmAQAAdQAIABIA
EQBUBl4CEQDAAmMCEQCKAWgCBgblAGwCVoDsCW8CVoCgAm8CBgBcCnMCNgCkAHcCFgAWAHsCUCAA
AAAAhgBrBgYAAQCgIwAAAACBAGQJhAIBANEjAAAAAIEAogqKAgIACCQAAAAAkQAWApACAwA4JAAA
AACBAKUJlwIGABAlAAAAAIEACAWfAgYAYCYAAAAAgQBlBWAACAASJwAAAACGGFwIBgAIABonAAAA
AIMYXAgGAAgAIicAAAAAkwjwB6oCCABOJwAAAACTCKgCsAIIAFUnAAAAAJMItAK2AggAXScAAAAA
lghlCr0CCQBkJwAAAACGGFwIBgAJAGwnAAAAAJEYYgjCAgkAGicAAAAAhhhcCAYACQB4JwAAAACD
ADwAEAAJAJsnAAAAAJEYYgjCAgoAGicAAAAAhhhcCAYACgCnJwAAAACDAB8AxgIKAAAAAQCTCQAA
AQBCCgAAAQBEAgAAAgAMAgAAAwDeBwAAAQC/AQAAAgBLCQAAAQD1BAAAAQCiBwAAAQAqAQkAXAgB
ABEAXAgGABkAXAgKACkAXAgQADEAXAgQADkAXAgQAEEAXAgQAEkAXAgQAFEAXAgQAFkAXAgQAGEA
XAgQAGkAXAgGAOEAXAgGAPkAXAgGABkBXAgVAHEA9AlGACkBcQoBADEBdQtMACkBLglPADkBOgZV
AEEB0ARcAOkAeQVgAAkBSAdkAAkBVwdrAFEBMAhgADEBNgtxAFkBPAl2AAwATgiGABQAlgqVAGEB
VwmaAGkBOAKgAHEBZAelAHEBLgu6AEEB2gTHAKkAXAgGAIkAXAgQAIkAXwrMAHEBxArSABwAXAjp
ACQAlQX1AKkAEwsAAZkAIAsFAakAOQoLAYEBTQERAYkB8goXAZEBEwMGAJkB+gEbAZEAXAgkAZEA
5ATHAKkAmQksAakBTQEyAYEBTQE4ASkBJwo/AaEAqQFgAKEAewFgADEBRwpFAbEBJghLATEBSgZY
AXEBTwteAXEBuQppATEBXwp0AWkBfAJ/AWEBMgqFAWEBMAOKAWEB+wSPAbEAXAgQAMEBYAYGALkA
XAgGALkAAQegAckBhAKmAckB+woQAMkBywoBALkAlAetAakASAGyAXEBvwq5ASwAXAjpAHEBVQrT
AdEAXAigAdEAHwIQADEBaQsAAqkBAAUGAtEAdwkLAukBTQERAvkBtQoZAtEA3goBANEAGAgdAgEC
XAgGAAECmgEQAAECggUQAAECsQAQAAECZgEQAAEC/AkjAgkCUAVgAHEAXAgGAOkAXAgGAJkBQgso
AgEBXAguAiEBXAgGADEBcwE2AqkBTQE8ApEATQJgAAgAFABUAggAGABZAikAewAFAy4ACwDdAi4A
EwDmAi4AGwAFAy4AIwAOAy4AKwA3Ay4AMwA3Ay4AOwA9Ay4AQwAOAy4ASwBLAy4AUwA3Ay4AWwBq
A0MAYwBZAkkAewAFA2EAawBZAmMAcwBZAsMAawBZAuMAawBZAhwAVAF7AZUB8QEDAAEABAADAAAA
9AfMAgAAyALSAgAAaQrYAgIACgADAAIACwAFAAEADAAFAAIADQAHAIAAjwDiAO8AywEEgAAAAQAA
AK0ar2IAAAAAAACAAAAABAAAAAAAAAAAAAAAQgL5AAAAAAALAAAAAAAAAAAAAABLAqIFAAAAAAQA
AAAAAAAAAAAAAEICQwYAAAAABAAAAAAAAAAAAAAAQgLtAAAAAAALAAAAAAAAAAAAAABLAsYAAAAA
AAQAAAAAAAAAAAAAAEIClAIAAAAAAAAAAAEAAACtCAAABQACAAYAAgAHAAIAQQC2AEMAtgBNALYA
dwC2AHkAtgCXAMYBmwDrAQAAAAAAPD5jX19EaXNwbGF5Q2xhc3MwXzAAPD45X180XzAAPEdldFBy
ZVN0YWdpbmdDb2x1bW5zPmJfXzRfMAA8TWFpbj5iX18wAElFbnVtZXJhYmxlYDEAQWN0aW9uYDEA
SUVudW1lcmF0b3JgMQBMaXN0YDEASW50MzIARnVuY2AyAFNUXzVjYjAwYmRiMjNiZTQyN2Q4MmEy
MTQ0NWM4MTAyYTE4ADw+OQA8TW9kdWxlPgBzZXRfVXNlcklEAFN5c3RlbS5JTwBNaWNyb3NvZnQu
U3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0uRGF0YQBtc2NvcmxpYgBTVF8xYTNm
ZGU2YTNlMDI0ZmM1YmFlZThiMmU0ZmMxZGIyYwA8PmMAZGMAU3lzdGVtLkNvbGxlY3Rpb25zLkdl
bmVyaWMATG9hZABBZGQARGJDb21tYW5kAFNxbENvbW1hbmQAc2V0X1Bhc3N3b3JkAFJlcGxhY2UA
Z2V0X1N0YWNrVHJhY2UAZGVmYXVsdEluc3RhbmNlAHNldF9EYXRhU291cmNlAGdldF9NZXNzYWdl
AERhdGFUYWJsZQBkdFRhYmxlAFZhcmlhYmxlAElFbnVtZXJhYmxlAElEaXNwb3NhYmxlAFJ1bnRp
bWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAHNvdXJjRmlsZQBNb3ZlRmlsZQBzZXRfRGVz
dGluYXRpb25UYWJsZU5hbWUAR2V0RmlsZU5hbWUAZmlsZU5hbWUAZ2V0X0NvbHVtbk5hbWUATWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBDb21iaW5lAHNldF9Db21tYW5kVHlwZQBTeXN0
ZW0uQ29yZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBW
U1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0
aW5nc0Jhc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBEZWxldGUAQ29tcGlsZXJHZW5l
cmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0
cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFz
c2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJs
eUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21w
aWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3Nl
bWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUA
QXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdl
dF9WYWx1ZQBzZXRfVmFsdWUAc2V0X0RlZmF1bHRWYWx1ZQB2YWx1ZQBNb3ZlAEluZGV4T2YASW5z
ZXJ0SW50b1ByZVN0YWdpbmcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBTcWxCdWxrQ29weUNv
bHVtbk1hcHBpbmcAZ2V0X0Nvbm5lY3Rpb25TdHJpbmcAR2V0Q29ubmVjdGlvblN0cmluZwBUb1N0
cmluZwBzZXRfSW5pdGlhbENhdGFsb2cARm9yRWFjaABQYXRoAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
U2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlw
dE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF81Y2IwMGJkYjIzYmU0MjdkODJh
MjE0NDVjODEwMmExOC5kbGwAZ2V0X0l0ZW0AU3lzdGVtAFRyaW0ARW51bQByZXNvdXJjZU1hbgBP
cGVuAFNjcmlwdE1haW4ARGF0YUNvbHVtbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xv
YmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBTcWxCdWxrQ29weUNvbHVtbk1hcHBpbmdDb2xs
ZWN0aW9uAERhdGFDb2x1bW5Db2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAHNldF9Db25uZWN0
aW9uAERiQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21t
b24AR2V0Q3VsdHVyZUluZm8AZ2V0X1RleHRJbmZvAFNraXAAU3lzdGVtLkxpbnEAQ2hhcgBJRGF0
YVJlYWRlcgBTcWxEYXRhUmVhZGVyAEV4ZWN1dGVSZWFkZXIAaGVhZGVyAERiQ29ubmVjdGlvblN0
cmluZ0J1aWxkZXIAU3FsQ29ubmVjdGlvblN0cmluZ0J1aWxkZXIAZGVzdGluYXRpb25Gb2xkZXIA
Z2V0X1Jlc291cmNlTWFuYWdlcgBFdmVudHNPYmplY3RXcmFwcGVyAFdyaXRlVG9TZXJ2ZXIARmly
ZUVycm9yAGdldF9MaXN0U2VwYXJhdG9yAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IA
LmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2Vz
AFN5c3RlbS5SZXNvdXJjZXMAU1RfMWEzZmRlNmEzZTAyNGZjNWJhZWU4YjJlNGZjMWRiMmMuUHJv
cGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzFhM2ZkZTZhM2Uw
MjRmYzViYWVlOGIyZTRmYzFkYjJjLlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBFbnVtZXJhdGVG
aWxlcwBjb2x1bW5OYW1lcwBSZWFkQWxsTGluZXMAQ2xlYW5VcEV4dHJhUXVvdGVzAGdldF9Db2x1
bW5NYXBwaW5ncwBTZXR0aW5ncwBpdGVtcwBnZXRfQ29sdW1ucwBHZXRQcmVTdGFnaW5nQ29sdW1u
cwBTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnMAU3lzdGVtLkNvbGxlY3Rpb25zAFN1Y2Nl
c3MAZ2V0X0R0cwBzZXRfTXVsdGlwbGVBY3RpdmVSZXN1bHRTZXRzAFNjcmlwdFJlc3VsdHMAZ2V0
X0V2ZW50cwBFeGlzdHMAZ2V0X1Jvd3MAcm93cwBDb25jYXQAT2JqZWN0AFNlbGVjdABkdABTcGxp
dABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0N1
cnJlbnQASXNWYWxpZEZpbGVDb250ZW50AGdldF9Db3VudABDYXN0AFRvTGlzdABzZXRfQ29tbWFu
ZFRpbWVvdXQAc2V0X0J1bGtDb3B5VGltZW91dABNb3ZlTmV4dABzZXRfQ29tbWFuZFRleHQARGF0
YVJvdwBOZXdSb3cAUmVnZXgAc2V0X0l0ZW1BcnJheQBUb0FycmF5AFRvQ2hhckFycmF5AGdldF9B
c3NlbWJseQBBbnkAU3FsQnVsa0NvcHkARGlyZWN0b3J5AG9wX0VxdWFsaXR5AEVtcHR5AAAAJSQA
UAByAG8AagBlAGMAdAA6ADoARgBpAGwAZQBQAGEAdABoAAAnJABQAHIAbwBqAGUAYwB0ADoAOgBF
AHIAcgBvAHIAUABhAHQAaAAAKyQAUAByAG8AagBlAGMAdAA6ADoAQQByAGMAaABpAHYAZQBQAGEA
dABoAAArJABQAHIAbwBqAGUAYwB0ADoAOgBMAGkAbgBlAHMAVABvAFMAawBpAHAAACMkAFAAcgBv
AGoAZQBjAHQAOgA6AEMAdQBsAHQAdQByAGUAAAsqAC4AYwBzAHYAACdVAHMAZQByADoAOgBlAHIA
cgBvAHIARgBpAGwAZQBOAGEAbQBlAABBLAAoAD8APQAoAD8AOgBbAF4AIgBdACoAIgBbAF4AIgBd
ACoAIgApACoAKAA/ACEAWwBeACIAXQAqACIAKQApAAATUgBvAHcAUwB0AGEAdAB1AHMAAAEAF0YA
aQBsAGUAIABOAGEAbQBlADoAIAAAAyAAAEtTAEUATABFAEMAVAAgACoAIABGAFIATwBNACAATQAy
AE0ARgBpAGwAZQBEAGEAdABhACAAVwBIAEUAUgBFACAAMQAgAD0AIAAwAAAXTQAyAE0ARgBpAGwA
ZQBEAGEAdABhAAAXUgBvAHUAdABlAE4AdQBtAGIAZQByAAAnUAByAG8AZAB1AGMAZQByAFIAbwB1
AHQAZQBOAHUAbQBiAGUAcgAAI0MAdQBzAHQAbwBtAGUAcgBGAHIAYQBtAGUAdwBvAHIAawAAK0MA
dQBzAHQAbwBtAGUAcgBGAHIAYQBtAGUAdwBvAHIAawBOAGEAbQBlAAAvJABQAHIAbwBqAGUAYwB0
ADoAOgBTAFEATABTAGUAcgB2AGUAcgBOAGEAbQBlAAAnJABQAHIAbwBqAGUAYwB0ADoAOgBTAFEA
bABEAEIATgBhAG0AZQAAHyQAUAByAG8AagBlAGMAdAA6ADoAUwBRAGwAVQBOAAAhJABQAHIAbwBq
AGUAYwB0ADoAOgBTAFEATABQAHcAZAAAcVMAVABfADEAYQAzAGYAZABlADYAYQAzAGUAMAAyADQA
ZgBjADUAYgBhAGUAZQA4AGIAMgBlADQAZgBjADEAZABiADIAYwAuAFAAcgBvAHAAZQByAHQAaQBl
AHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAABuBKAlx3TRJj1/8i0+5I0sABCABAQgDIAABBSABARER
BCABAQ4GIAEBEYCJKQcTDg4OCBUSPQEOFRJBAQ4ODh0OEhgSRR0OEkkCFRJBAQ4OHQ4STRJRBSAA
EoCVAgYOBSAAEoCdBiABEoChHAMgABwDIAAOBgABEoCFDgUgABKAqQQgAB0DCQACFRJlAQ4ODgUV
EmUBDgggABUSQQETAAUVEkEBDgQgABMABQABHQ4OBAABDg4QEAECFRJlAR4AFRJlAR4ACAMKAQ4M
EAEBHR4AFRJlAR4ABCABARwFIAEdDg4PEAEBFRI9AR4AFRJlAR4ABhUSgL0BDgUgAgEcGAUVEj0B
DgogAQEVEoC9ARMABCAAEk0FIAEBHRwFIAASgMEFIAEBEk0DIAACCAABEoDNEYDRByACAQ4SgM0F
IAASgNUFIAEBEkkGIAESTR0cBSAAEoDZBQABDh0OCCAFAggODg4IAwcBCAUgAQ4dAwoQAQECFRJl
AR4AChABAQgVEmUBHgAGIAEdDh0DAwcBDgUAAg4ODgQAAQIOBAABAQ4FAAIBDg4KBwQSVRJZEl0S
YQUgAQESWQYgAQERgOkEIAASYQYgAQESgO0MEAEBFRJlAR4AEoDxBAoBEkkHFRJ5AhJJDhcQAgIV
EmUBHgEVEmUBHgAVEnkCHgAeAQUKAhJJDg4HBgIOElkSaRUSQQEODgUAAgIODgQgAQgOBSAAEoD1
ByACEoD5Dg4DIAAIBSABARJVBCABAQIFIAASgQkHIAIBDhKBCQUgAg4ODgUgARJJDgi3elxWGTTg
iQiJhF3NgIDMkQQAAAAABAEAAAAEBhKAgQQGEoCFAwYSEAIGCAMGERQDBhJVAwYSHAgGFRJ5AhJJ
DgUgAQEdDgUgAQIdDgYAAwEODg4HIAAVEj0BDgogAgISVRUSZQEOBQAAEoCBBQAAEoCFBgABARKA
hQQAABIQAwAAAQUgAQ4SSQUIABKAgQUIABKAhQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9u
RXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF8xYTNmZGU2YTNlMDI0ZmM1YmFlZThiMmU0
ZmMxZGIyYwAABQEAAAAADQEACEV1cm9maW5zAAAeAQAZQ29weXJpZ2h0IEAgRXVyb2ZpbnMgMjAx
OAAARwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFt
ZRAuTkVUIEZyYW1ld29yayA0AAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVz
b3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwg
UHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVS
ZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAeEMAAAAAAAAAAAAAkkMAAAAgAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAIRDAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAA
AP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAA
ABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAA
OgQAAAAAAAAAAAAAOgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4A
AAEAAAABAK9irRoAAAEAr2KtGj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEA
cgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACw
BJoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAHYDAAABADAAMAAwADAAMAA0AGIA
MAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAyAAkAAQBDAG8AbQBwAGEAbgB5AE4AYQBt
AGUAAAAAAEUAdQByAG8AZgBpAG4AcwAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQA
aQBvAG4AAAAAAFMAVABfADEAYQAzAGYAZABlADYAYQAzAGUAMAAyADQAZgBjADUAYgBhAGUAZQA4
AGIAMgBlADQAZgBjADEAZABiADIAYwAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAA
MQAuADAALgA2ADgAMgA5AC4AMgA1ADIANgAzAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBh
AG0AZQAAAFMAVABfADUAYwBiADAAMABiAGQAYgAyADMAYgBlADQAMgA3AGQAOAAyAGEAMgAxADQA
NAA1AGMAOAAxADAAMgBhADEAOAAuAGQAbABsAAAAWAAaAAEATABlAGcAYQBsAEMAbwBwAHkAcgBp
AGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAARQB1AHIAbwBmAGkAbgBzACAAMgAwADEA
OAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwBy
AGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADUAYwBiADAAMABiAGQAYgAyADMA
YgBlADQAMgA3AGQAOAAyAGEAMgAxADQANAA1AGMAOAAxADAAMgBhADEAOAAuAGQAbABsAAAAaAAk
AAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwAxAGEAMwBmAGQAZQA2AGEAMwBlADAA
MgA0AGYAYwA1AGIAYQBlAGUAOABiADIAZQA0AGYAYwAxAGQAYgAyAGMAAABCAA8AAQBQAHIAbwBk
AHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYAOAAyADkALgAyADUAMgA2ADMAAAAAAEYA
DwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYAOAAyADkALgAy
ADUAMgA2ADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAKQzAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Impoty M2M Container\Move To Error Path"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="File System Task"
          DTS:DTSID="{DA585737-69E8-4CEE-8EC0-FF1FC5965E3B}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Move To Error Path"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <FileSystemData
              TaskOperationType="MoveFile"
              TaskOverwriteDestFile="True"
              TaskSourcePath="User::errorFilePathSource"
              TaskIsSourceVariable="True"
              TaskDestinationPath="User::errorFilePathDestination"
              TaskIsDestinationVariable="True" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Impoty M2M Container\Update ID Column"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{98F78E7D-B2F7-4EB0-8082-5BD28B942E0D}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Update ID Column"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{C1C3BA11-CE70-419A-94BE-17C4FEC86610}"
              SQLTask:SqlStatementSource="&#xA;update Mn set Id= NewId() from [dbo].[M2MFileData] Mn&#xA;where MN.Id is null " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Impoty M2M Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{C40A820A-B68B-4BF4-B8A6-D685F8875145}"
          DTS:From="Package\Impoty M2M Container\Create Archive Folder if not exist"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Impoty M2M Container\Create Error folder if not exist" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Impoty M2M Container.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{B2392CF2-A45B-4C80-B628-21E343A712A2}"
          DTS:From="Package\Impoty M2M Container\Create Error folder if not exist"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Impoty M2M Container\Create Pending folder path" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Impoty M2M Container.PrecedenceConstraints[Constraint 16]"
          DTS:CreationName=""
          DTS:DTSID="{FEBA9BE1-42A0-431F-9A20-AF82D5CE1D1F}"
          DTS:From="Package\Impoty M2M Container\Import from csv to pre staging"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 16"
          DTS:To="Package\Impoty M2M Container\Move To Error Path"
          DTS:Value="1" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Impoty M2M Container.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{47CF3367-9629-4B5A-AF7F-A0C4B29F6288}"
          DTS:From="Package\Impoty M2M Container\Import from csv to pre staging"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Impoty M2M Container\Update ID Column"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Impoty M2M Container.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{489E9794-19D1-41AA-B68D-442547AB360C}"
          DTS:From="Package\Impoty M2M Container\Create ready to send folder if not exist"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Impoty M2M Container\Import from csv to pre staging" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Impoty M2M Container.PrecedenceConstraints[Constraint 6]"
          DTS:CreationName=""
          DTS:DTSID="{5B1FA697-9628-4977-AC6E-373CF172C6E8}"
          DTS:From="Package\Impoty M2M Container\Create Pending folder path"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 6"
          DTS:To="Package\Impoty M2M Container\Create ready to send folder if not exist" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="234.4,41.6"
          Id="Package\Impoty M2M Container\Create Archive Folder if not exist"
          TopLeft="29,4" />
        <NodeLayout
          Size="221.6,41.6"
          Id="Package\Impoty M2M Container\Create Error folder if not exist"
          TopLeft="32,75" />
        <NodeLayout
          Size="206.4,41.6"
          Id="Package\Impoty M2M Container\Create Pending folder path"
          TopLeft="46,142" />
        <NodeLayout
          Size="262.4,41.6"
          Id="Package\Impoty M2M Container\Create ready to send folder if not exist"
          TopLeft="15,215" />
        <NodeLayout
          Size="224,42.4"
          Id="Package\Impoty M2M Container\Import from csv to pre staging"
          TopLeft="30.2063492181753,282.555555581384" />
        <NodeLayout
          Size="172,41.6"
          Id="Package\Impoty M2M Container\Move To Error Path"
          TopLeft="258.194445365419,349.444444418616" />
        <NodeLayout
          Size="168,41.6"
          Id="Package\Impoty M2M Container\Update ID Column"
          TopLeft="22.3333339542151,361.833333139618" />
        <EdgeLayout
          Id="Package\Impoty M2M Container.PrecedenceConstraints[Constraint]"
          TopLeft="144.5,46">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,29"
              Start="0,0"
              End="0,21.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Impoty M2M Container.PrecedenceConstraints[Constraint 1]"
          TopLeft="146,117">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,25"
              Start="0,0"
              End="0,17.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Impoty M2M Container.PrecedenceConstraints[Constraint 16]"
          TopLeft="178.206349218175,325.222222248051">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="165.988096147244,24.2222221705654"
              Start="0,0"
              End="165.988096147244,16.7222221705654">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,5.79196215405834" />
                  <mssgle:CubicBezierSegment
                    Point1="0,5.79196215405834"
                    Point2="0,9.79196215405834"
                    Point3="4,9.79196215405834" />
                  <mssgle:LineSegment
                    End="161.988096147244,9.79196215405834" />
                  <mssgle:CubicBezierSegment
                    Point1="161.988096147244,9.79196215405834"
                    Point2="165.988096147244,9.79196215405834"
                    Point3="165.988096147244,13.7919621540583" />
                  <mssgle:LineSegment
                    End="165.988096147244,16.7222221705654" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="67.7527004173719,14.7919621540583,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Impoty M2M Container.PrecedenceConstraints[Constraint 2]"
          TopLeft="106.269841586195,325.222222248051">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,36.6111108915674"
              Start="0,0"
              End="0,29.1111108915674">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.1111108915674" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,8.75086794578368,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Impoty M2M Container.PrecedenceConstraints[Constraint 5]"
          TopLeft="144.269841275754,257">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,25.5555555813839"
              Start="0,0"
              End="0,18.0555555813839">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,18.0555555813839" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Impoty M2M Container.PrecedenceConstraints[Constraint 6]"
          TopLeft="148,184">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,31"
              Start="0,0"
              End="0,23.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="497.6,466.4"
          Size="497.6,509.6"
          Id="Package\Impoty M2M Container"
          TopLeft="334.142853251829,54.3529393918787" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>